$date
	Thu May 14 03:36:54 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! PC_select1 $end
$var wire 1 " PC_select2 $end
$var wire 1 # clk_i $end
$var wire 1 $ rst_i $end
$var wire 1 % zero_o $end
$var wire 1 & zero_extend $end
$var wire 32 ' sum_o_adder2 [31:0] $end
$var wire 32 ( sum_o_adder1 [31:0] $end
$var wire 1 ) sltiu_ctrl $end
$var wire 5 * shamp_o [4:0] $end
$var wire 32 + result_o [31:0] $end
$var wire 32 , pc_out_o [31:0] $end
$var wire 1 - lui_ctrl $end
$var wire 32 . instr_o [31:0] $end
$var wire 32 / data_o_Zero_Filled_Extend [31:0] $end
$var wire 32 0 data_o_Sign_Extend [31:0] $end
$var wire 32 1 data_o_Shift2 [31:0] $end
$var wire 32 2 data_o_PC [31:0] $end
$var wire 5 3 data_o_Mux_Write [4:0] $end
$var wire 32 4 data_o_Mux_ALUSrc [31:0] $end
$var wire 32 5 data_o_Extend [31:0] $end
$var wire 1 6 RegWrite_o $end
$var wire 1 7 RegDst_o $end
$var wire 32 8 RTdata_o [31:0] $end
$var wire 32 9 RSdata_o [31:0] $end
$var wire 1 : PC_select $end
$var wire 1 ; Branch_o $end
$var wire 3 < ALU_op_o [2:0] $end
$var wire 1 = ALUSrc_o $end
$var wire 4 > ALUCtrl_o [3:0] $end
$scope module AC $end
$var wire 6 ? funct_i [5:0] $end
$var wire 3 @ ALUOp_i [2:0] $end
$var reg 4 A ALUCtrl_o [3:0] $end
$upscope $end
$scope module ALU $end
$var wire 1 B a $end
$var wire 4 C ctrl_i [3:0] $end
$var wire 1 D set $end
$var wire 32 E src1_shift [31:0] $end
$var wire 32 F src2_shift [31:0] $end
$var wire 32 G src2_i [31:0] $end
$var wire 32 H src1_i [31:0] $end
$var wire 1 ) sltiu_ctrl $end
$var wire 1 I sign_check $end
$var wire 5 J shamp [4:0] $end
$var wire 1 K s $end
$var wire 32 L r [31:0] $end
$var wire 1 M over $end
$var wire 1 - lui_ctrl $end
$var wire 1 N lt $end
$var wire 1 O equall $end
$var wire 32 P equal [31:0] $end
$var wire 1 Q c $end
$var reg 32 R result_o [31:0] $end
$var reg 1 % zero_o $end
$scope module a1 $end
$var wire 1 S A_invert $end
$var wire 1 T B_invert $end
$var wire 1 K Sign $end
$var wire 1 M V $end
$var wire 1 U cin $end
$var wire 1 D less $end
$var wire 2 V operation [1:0] $end
$var wire 8 W v [7:0] $end
$var wire 32 X src2 [31:0] $end
$var wire 32 Y src1 [31:0] $end
$var wire 32 Z result [31:0] $end
$var wire 4 [ p [3:0] $end
$var wire 4 \ g [3:0] $end
$var wire 32 ] equal [31:0] $end
$var wire 1 Q cout $end
$var wire 4 ^ c [3:0] $end
$scope module cl $end
$var wire 4 _ G [3:0] $end
$var wire 4 ` P [3:0] $end
$var wire 1 U cin $end
$var wire 4 a cout [3:0] $end
$upscope $end
$scope module e1 $end
$var wire 1 S A_invert $end
$var wire 1 T B_invert $end
$var wire 1 U cin $end
$var wire 8 b cout [7:0] $end
$var wire 1 D less $end
$var wire 2 c operation [1:0] $end
$var wire 8 d src1 [7:0] $end
$var wire 8 e src2 [7:0] $end
$var wire 8 f result [7:0] $end
$var wire 8 g p [7:0] $end
$var wire 8 h g [7:0] $end
$var wire 8 i equal [7:0] $end
$var wire 8 j c [7:0] $end
$var wire 1 k P $end
$var wire 1 l G $end
$scope module a1 $end
$var wire 1 S A_invert $end
$var wire 1 m Add $end
$var wire 1 n And $end
$var wire 1 T B_invert $end
$var wire 1 o Or $end
$var wire 1 U cin $end
$var wire 1 p equal $end
$var wire 1 q g $end
$var wire 1 r input1 $end
$var wire 1 s input2 $end
$var wire 1 D less $end
$var wire 2 t operation [1:0] $end
$var wire 1 u p $end
$var wire 1 v src1 $end
$var wire 1 w src2 $end
$var reg 1 x result $end
$upscope $end
$scope module a2 $end
$var wire 1 S A_invert $end
$var wire 1 y Add $end
$var wire 1 z And $end
$var wire 1 T B_invert $end
$var wire 1 { Or $end
$var wire 1 | cin $end
$var wire 1 } equal $end
$var wire 1 ~ g $end
$var wire 1 !" input1 $end
$var wire 1 "" input2 $end
$var wire 1 #" less $end
$var wire 2 $" operation [1:0] $end
$var wire 1 %" p $end
$var wire 1 &" src1 $end
$var wire 1 '" src2 $end
$var reg 1 (" result $end
$upscope $end
$scope module a3 $end
$var wire 1 S A_invert $end
$var wire 1 )" Add $end
$var wire 1 *" And $end
$var wire 1 T B_invert $end
$var wire 1 +" Or $end
$var wire 1 ," cin $end
$var wire 1 -" equal $end
$var wire 1 ." g $end
$var wire 1 /" input1 $end
$var wire 1 0" input2 $end
$var wire 1 1" less $end
$var wire 2 2" operation [1:0] $end
$var wire 1 3" p $end
$var wire 1 4" src1 $end
$var wire 1 5" src2 $end
$var reg 1 6" result $end
$upscope $end
$scope module a4 $end
$var wire 1 S A_invert $end
$var wire 1 7" Add $end
$var wire 1 8" And $end
$var wire 1 T B_invert $end
$var wire 1 9" Or $end
$var wire 1 :" cin $end
$var wire 1 ;" equal $end
$var wire 1 <" g $end
$var wire 1 =" input1 $end
$var wire 1 >" input2 $end
$var wire 1 ?" less $end
$var wire 2 @" operation [1:0] $end
$var wire 1 A" p $end
$var wire 1 B" src1 $end
$var wire 1 C" src2 $end
$var reg 1 D" result $end
$upscope $end
$scope module a5 $end
$var wire 1 S A_invert $end
$var wire 1 E" Add $end
$var wire 1 F" And $end
$var wire 1 T B_invert $end
$var wire 1 G" Or $end
$var wire 1 H" cin $end
$var wire 1 I" equal $end
$var wire 1 J" g $end
$var wire 1 K" input1 $end
$var wire 1 L" input2 $end
$var wire 1 M" less $end
$var wire 2 N" operation [1:0] $end
$var wire 1 O" p $end
$var wire 1 P" src1 $end
$var wire 1 Q" src2 $end
$var reg 1 R" result $end
$upscope $end
$scope module a6 $end
$var wire 1 S A_invert $end
$var wire 1 S" Add $end
$var wire 1 T" And $end
$var wire 1 T B_invert $end
$var wire 1 U" Or $end
$var wire 1 V" cin $end
$var wire 1 W" equal $end
$var wire 1 X" g $end
$var wire 1 Y" input1 $end
$var wire 1 Z" input2 $end
$var wire 1 [" less $end
$var wire 2 \" operation [1:0] $end
$var wire 1 ]" p $end
$var wire 1 ^" src1 $end
$var wire 1 _" src2 $end
$var reg 1 `" result $end
$upscope $end
$scope module a7 $end
$var wire 1 S A_invert $end
$var wire 1 a" Add $end
$var wire 1 b" And $end
$var wire 1 T B_invert $end
$var wire 1 c" Or $end
$var wire 1 d" cin $end
$var wire 1 e" equal $end
$var wire 1 f" g $end
$var wire 1 g" input1 $end
$var wire 1 h" input2 $end
$var wire 1 i" less $end
$var wire 2 j" operation [1:0] $end
$var wire 1 k" p $end
$var wire 1 l" src1 $end
$var wire 1 m" src2 $end
$var reg 1 n" result $end
$upscope $end
$scope module a8 $end
$var wire 1 S A_invert $end
$var wire 1 o" Add $end
$var wire 1 p" And $end
$var wire 1 T B_invert $end
$var wire 1 q" Or $end
$var wire 1 r" cin $end
$var wire 1 s" equal $end
$var wire 1 t" g $end
$var wire 1 u" input1 $end
$var wire 1 v" input2 $end
$var wire 1 w" less $end
$var wire 2 x" operation [1:0] $end
$var wire 1 y" p $end
$var wire 1 z" src1 $end
$var wire 1 {" src2 $end
$var reg 1 |" result $end
$upscope $end
$scope module cl $end
$var wire 8 }" G [7:0] $end
$var wire 1 l G_out $end
$var wire 8 ~" P [7:0] $end
$var wire 1 k P_out $end
$var wire 1 U cin $end
$var wire 1 !# g_wire $end
$var wire 1 "# p_wire $end
$var wire 8 ## cout [7:0] $end
$upscope $end
$upscope $end
$scope module e2 $end
$var wire 1 S A_invert $end
$var wire 1 T B_invert $end
$var wire 1 $# cin $end
$var wire 8 %# cout [7:0] $end
$var wire 1 &# less $end
$var wire 2 '# operation [1:0] $end
$var wire 8 (# src1 [7:0] $end
$var wire 8 )# src2 [7:0] $end
$var wire 8 *# result [7:0] $end
$var wire 8 +# p [7:0] $end
$var wire 8 ,# g [7:0] $end
$var wire 8 -# equal [7:0] $end
$var wire 8 .# c [7:0] $end
$var wire 1 /# P $end
$var wire 1 0# G $end
$scope module a1 $end
$var wire 1 S A_invert $end
$var wire 1 1# Add $end
$var wire 1 2# And $end
$var wire 1 T B_invert $end
$var wire 1 3# Or $end
$var wire 1 $# cin $end
$var wire 1 4# equal $end
$var wire 1 5# g $end
$var wire 1 6# input1 $end
$var wire 1 7# input2 $end
$var wire 1 &# less $end
$var wire 2 8# operation [1:0] $end
$var wire 1 9# p $end
$var wire 1 :# src1 $end
$var wire 1 ;# src2 $end
$var reg 1 <# result $end
$upscope $end
$scope module a2 $end
$var wire 1 S A_invert $end
$var wire 1 =# Add $end
$var wire 1 ># And $end
$var wire 1 T B_invert $end
$var wire 1 ?# Or $end
$var wire 1 @# cin $end
$var wire 1 A# equal $end
$var wire 1 B# g $end
$var wire 1 C# input1 $end
$var wire 1 D# input2 $end
$var wire 1 E# less $end
$var wire 2 F# operation [1:0] $end
$var wire 1 G# p $end
$var wire 1 H# src1 $end
$var wire 1 I# src2 $end
$var reg 1 J# result $end
$upscope $end
$scope module a3 $end
$var wire 1 S A_invert $end
$var wire 1 K# Add $end
$var wire 1 L# And $end
$var wire 1 T B_invert $end
$var wire 1 M# Or $end
$var wire 1 N# cin $end
$var wire 1 O# equal $end
$var wire 1 P# g $end
$var wire 1 Q# input1 $end
$var wire 1 R# input2 $end
$var wire 1 S# less $end
$var wire 2 T# operation [1:0] $end
$var wire 1 U# p $end
$var wire 1 V# src1 $end
$var wire 1 W# src2 $end
$var reg 1 X# result $end
$upscope $end
$scope module a4 $end
$var wire 1 S A_invert $end
$var wire 1 Y# Add $end
$var wire 1 Z# And $end
$var wire 1 T B_invert $end
$var wire 1 [# Or $end
$var wire 1 \# cin $end
$var wire 1 ]# equal $end
$var wire 1 ^# g $end
$var wire 1 _# input1 $end
$var wire 1 `# input2 $end
$var wire 1 a# less $end
$var wire 2 b# operation [1:0] $end
$var wire 1 c# p $end
$var wire 1 d# src1 $end
$var wire 1 e# src2 $end
$var reg 1 f# result $end
$upscope $end
$scope module a5 $end
$var wire 1 S A_invert $end
$var wire 1 g# Add $end
$var wire 1 h# And $end
$var wire 1 T B_invert $end
$var wire 1 i# Or $end
$var wire 1 j# cin $end
$var wire 1 k# equal $end
$var wire 1 l# g $end
$var wire 1 m# input1 $end
$var wire 1 n# input2 $end
$var wire 1 o# less $end
$var wire 2 p# operation [1:0] $end
$var wire 1 q# p $end
$var wire 1 r# src1 $end
$var wire 1 s# src2 $end
$var reg 1 t# result $end
$upscope $end
$scope module a6 $end
$var wire 1 S A_invert $end
$var wire 1 u# Add $end
$var wire 1 v# And $end
$var wire 1 T B_invert $end
$var wire 1 w# Or $end
$var wire 1 x# cin $end
$var wire 1 y# equal $end
$var wire 1 z# g $end
$var wire 1 {# input1 $end
$var wire 1 |# input2 $end
$var wire 1 }# less $end
$var wire 2 ~# operation [1:0] $end
$var wire 1 !$ p $end
$var wire 1 "$ src1 $end
$var wire 1 #$ src2 $end
$var reg 1 $$ result $end
$upscope $end
$scope module a7 $end
$var wire 1 S A_invert $end
$var wire 1 %$ Add $end
$var wire 1 &$ And $end
$var wire 1 T B_invert $end
$var wire 1 '$ Or $end
$var wire 1 ($ cin $end
$var wire 1 )$ equal $end
$var wire 1 *$ g $end
$var wire 1 +$ input1 $end
$var wire 1 ,$ input2 $end
$var wire 1 -$ less $end
$var wire 2 .$ operation [1:0] $end
$var wire 1 /$ p $end
$var wire 1 0$ src1 $end
$var wire 1 1$ src2 $end
$var reg 1 2$ result $end
$upscope $end
$scope module a8 $end
$var wire 1 S A_invert $end
$var wire 1 3$ Add $end
$var wire 1 4$ And $end
$var wire 1 T B_invert $end
$var wire 1 5$ Or $end
$var wire 1 6$ cin $end
$var wire 1 7$ equal $end
$var wire 1 8$ g $end
$var wire 1 9$ input1 $end
$var wire 1 :$ input2 $end
$var wire 1 ;$ less $end
$var wire 2 <$ operation [1:0] $end
$var wire 1 =$ p $end
$var wire 1 >$ src1 $end
$var wire 1 ?$ src2 $end
$var reg 1 @$ result $end
$upscope $end
$scope module cl $end
$var wire 8 A$ G [7:0] $end
$var wire 1 0# G_out $end
$var wire 8 B$ P [7:0] $end
$var wire 1 /# P_out $end
$var wire 1 $# cin $end
$var wire 1 C$ g_wire $end
$var wire 1 D$ p_wire $end
$var wire 8 E$ cout [7:0] $end
$upscope $end
$upscope $end
$scope module e3 $end
$var wire 1 S A_invert $end
$var wire 1 T B_invert $end
$var wire 1 F$ cin $end
$var wire 8 G$ cout [7:0] $end
$var wire 1 H$ less $end
$var wire 2 I$ operation [1:0] $end
$var wire 8 J$ src1 [7:0] $end
$var wire 8 K$ src2 [7:0] $end
$var wire 8 L$ result [7:0] $end
$var wire 8 M$ p [7:0] $end
$var wire 8 N$ g [7:0] $end
$var wire 8 O$ equal [7:0] $end
$var wire 8 P$ c [7:0] $end
$var wire 1 Q$ P $end
$var wire 1 R$ G $end
$scope module a1 $end
$var wire 1 S A_invert $end
$var wire 1 S$ Add $end
$var wire 1 T$ And $end
$var wire 1 T B_invert $end
$var wire 1 U$ Or $end
$var wire 1 F$ cin $end
$var wire 1 V$ equal $end
$var wire 1 W$ g $end
$var wire 1 X$ input1 $end
$var wire 1 Y$ input2 $end
$var wire 1 H$ less $end
$var wire 2 Z$ operation [1:0] $end
$var wire 1 [$ p $end
$var wire 1 \$ src1 $end
$var wire 1 ]$ src2 $end
$var reg 1 ^$ result $end
$upscope $end
$scope module a2 $end
$var wire 1 S A_invert $end
$var wire 1 _$ Add $end
$var wire 1 `$ And $end
$var wire 1 T B_invert $end
$var wire 1 a$ Or $end
$var wire 1 b$ cin $end
$var wire 1 c$ equal $end
$var wire 1 d$ g $end
$var wire 1 e$ input1 $end
$var wire 1 f$ input2 $end
$var wire 1 g$ less $end
$var wire 2 h$ operation [1:0] $end
$var wire 1 i$ p $end
$var wire 1 j$ src1 $end
$var wire 1 k$ src2 $end
$var reg 1 l$ result $end
$upscope $end
$scope module a3 $end
$var wire 1 S A_invert $end
$var wire 1 m$ Add $end
$var wire 1 n$ And $end
$var wire 1 T B_invert $end
$var wire 1 o$ Or $end
$var wire 1 p$ cin $end
$var wire 1 q$ equal $end
$var wire 1 r$ g $end
$var wire 1 s$ input1 $end
$var wire 1 t$ input2 $end
$var wire 1 u$ less $end
$var wire 2 v$ operation [1:0] $end
$var wire 1 w$ p $end
$var wire 1 x$ src1 $end
$var wire 1 y$ src2 $end
$var reg 1 z$ result $end
$upscope $end
$scope module a4 $end
$var wire 1 S A_invert $end
$var wire 1 {$ Add $end
$var wire 1 |$ And $end
$var wire 1 T B_invert $end
$var wire 1 }$ Or $end
$var wire 1 ~$ cin $end
$var wire 1 !% equal $end
$var wire 1 "% g $end
$var wire 1 #% input1 $end
$var wire 1 $% input2 $end
$var wire 1 %% less $end
$var wire 2 &% operation [1:0] $end
$var wire 1 '% p $end
$var wire 1 (% src1 $end
$var wire 1 )% src2 $end
$var reg 1 *% result $end
$upscope $end
$scope module a5 $end
$var wire 1 S A_invert $end
$var wire 1 +% Add $end
$var wire 1 ,% And $end
$var wire 1 T B_invert $end
$var wire 1 -% Or $end
$var wire 1 .% cin $end
$var wire 1 /% equal $end
$var wire 1 0% g $end
$var wire 1 1% input1 $end
$var wire 1 2% input2 $end
$var wire 1 3% less $end
$var wire 2 4% operation [1:0] $end
$var wire 1 5% p $end
$var wire 1 6% src1 $end
$var wire 1 7% src2 $end
$var reg 1 8% result $end
$upscope $end
$scope module a6 $end
$var wire 1 S A_invert $end
$var wire 1 9% Add $end
$var wire 1 :% And $end
$var wire 1 T B_invert $end
$var wire 1 ;% Or $end
$var wire 1 <% cin $end
$var wire 1 =% equal $end
$var wire 1 >% g $end
$var wire 1 ?% input1 $end
$var wire 1 @% input2 $end
$var wire 1 A% less $end
$var wire 2 B% operation [1:0] $end
$var wire 1 C% p $end
$var wire 1 D% src1 $end
$var wire 1 E% src2 $end
$var reg 1 F% result $end
$upscope $end
$scope module a7 $end
$var wire 1 S A_invert $end
$var wire 1 G% Add $end
$var wire 1 H% And $end
$var wire 1 T B_invert $end
$var wire 1 I% Or $end
$var wire 1 J% cin $end
$var wire 1 K% equal $end
$var wire 1 L% g $end
$var wire 1 M% input1 $end
$var wire 1 N% input2 $end
$var wire 1 O% less $end
$var wire 2 P% operation [1:0] $end
$var wire 1 Q% p $end
$var wire 1 R% src1 $end
$var wire 1 S% src2 $end
$var reg 1 T% result $end
$upscope $end
$scope module a8 $end
$var wire 1 S A_invert $end
$var wire 1 U% Add $end
$var wire 1 V% And $end
$var wire 1 T B_invert $end
$var wire 1 W% Or $end
$var wire 1 X% cin $end
$var wire 1 Y% equal $end
$var wire 1 Z% g $end
$var wire 1 [% input1 $end
$var wire 1 \% input2 $end
$var wire 1 ]% less $end
$var wire 2 ^% operation [1:0] $end
$var wire 1 _% p $end
$var wire 1 `% src1 $end
$var wire 1 a% src2 $end
$var reg 1 b% result $end
$upscope $end
$scope module cl $end
$var wire 8 c% G [7:0] $end
$var wire 1 R$ G_out $end
$var wire 8 d% P [7:0] $end
$var wire 1 Q$ P_out $end
$var wire 1 F$ cin $end
$var wire 1 e% g_wire $end
$var wire 1 f% p_wire $end
$var wire 8 g% cout [7:0] $end
$upscope $end
$upscope $end
$scope module e4 $end
$var wire 1 S A_invert $end
$var wire 1 T B_invert $end
$var wire 1 h% cin $end
$var wire 8 i% cout [7:0] $end
$var wire 1 j% less $end
$var wire 2 k% operation [1:0] $end
$var wire 8 l% src1 [7:0] $end
$var wire 8 m% src2 [7:0] $end
$var wire 8 n% result [7:0] $end
$var wire 8 o% p [7:0] $end
$var wire 8 p% g [7:0] $end
$var wire 8 q% equal [7:0] $end
$var wire 8 r% c [7:0] $end
$var wire 1 s% P $end
$var wire 1 t% G $end
$scope module a1 $end
$var wire 1 S A_invert $end
$var wire 1 u% Add $end
$var wire 1 v% And $end
$var wire 1 T B_invert $end
$var wire 1 w% Or $end
$var wire 1 h% cin $end
$var wire 1 x% equal $end
$var wire 1 y% g $end
$var wire 1 z% input1 $end
$var wire 1 {% input2 $end
$var wire 1 j% less $end
$var wire 2 |% operation [1:0] $end
$var wire 1 }% p $end
$var wire 1 ~% src1 $end
$var wire 1 !& src2 $end
$var reg 1 "& result $end
$upscope $end
$scope module a2 $end
$var wire 1 S A_invert $end
$var wire 1 #& Add $end
$var wire 1 $& And $end
$var wire 1 T B_invert $end
$var wire 1 %& Or $end
$var wire 1 && cin $end
$var wire 1 '& equal $end
$var wire 1 (& g $end
$var wire 1 )& input1 $end
$var wire 1 *& input2 $end
$var wire 1 +& less $end
$var wire 2 ,& operation [1:0] $end
$var wire 1 -& p $end
$var wire 1 .& src1 $end
$var wire 1 /& src2 $end
$var reg 1 0& result $end
$upscope $end
$scope module a3 $end
$var wire 1 S A_invert $end
$var wire 1 1& Add $end
$var wire 1 2& And $end
$var wire 1 T B_invert $end
$var wire 1 3& Or $end
$var wire 1 4& cin $end
$var wire 1 5& equal $end
$var wire 1 6& g $end
$var wire 1 7& input1 $end
$var wire 1 8& input2 $end
$var wire 1 9& less $end
$var wire 2 :& operation [1:0] $end
$var wire 1 ;& p $end
$var wire 1 <& src1 $end
$var wire 1 =& src2 $end
$var reg 1 >& result $end
$upscope $end
$scope module a4 $end
$var wire 1 S A_invert $end
$var wire 1 ?& Add $end
$var wire 1 @& And $end
$var wire 1 T B_invert $end
$var wire 1 A& Or $end
$var wire 1 B& cin $end
$var wire 1 C& equal $end
$var wire 1 D& g $end
$var wire 1 E& input1 $end
$var wire 1 F& input2 $end
$var wire 1 G& less $end
$var wire 2 H& operation [1:0] $end
$var wire 1 I& p $end
$var wire 1 J& src1 $end
$var wire 1 K& src2 $end
$var reg 1 L& result $end
$upscope $end
$scope module a5 $end
$var wire 1 S A_invert $end
$var wire 1 M& Add $end
$var wire 1 N& And $end
$var wire 1 T B_invert $end
$var wire 1 O& Or $end
$var wire 1 P& cin $end
$var wire 1 Q& equal $end
$var wire 1 R& g $end
$var wire 1 S& input1 $end
$var wire 1 T& input2 $end
$var wire 1 U& less $end
$var wire 2 V& operation [1:0] $end
$var wire 1 W& p $end
$var wire 1 X& src1 $end
$var wire 1 Y& src2 $end
$var reg 1 Z& result $end
$upscope $end
$scope module a6 $end
$var wire 1 S A_invert $end
$var wire 1 [& Add $end
$var wire 1 \& And $end
$var wire 1 T B_invert $end
$var wire 1 ]& Or $end
$var wire 1 ^& cin $end
$var wire 1 _& equal $end
$var wire 1 `& g $end
$var wire 1 a& input1 $end
$var wire 1 b& input2 $end
$var wire 1 c& less $end
$var wire 2 d& operation [1:0] $end
$var wire 1 e& p $end
$var wire 1 f& src1 $end
$var wire 1 g& src2 $end
$var reg 1 h& result $end
$upscope $end
$scope module a7 $end
$var wire 1 S A_invert $end
$var wire 1 i& Add $end
$var wire 1 j& And $end
$var wire 1 T B_invert $end
$var wire 1 k& Or $end
$var wire 1 l& cin $end
$var wire 1 m& equal $end
$var wire 1 n& g $end
$var wire 1 o& input1 $end
$var wire 1 p& input2 $end
$var wire 1 q& less $end
$var wire 2 r& operation [1:0] $end
$var wire 1 s& p $end
$var wire 1 t& src1 $end
$var wire 1 u& src2 $end
$var reg 1 v& result $end
$upscope $end
$scope module a8 $end
$var wire 1 S A_invert $end
$var wire 1 w& Add $end
$var wire 1 x& And $end
$var wire 1 T B_invert $end
$var wire 1 y& Or $end
$var wire 1 z& cin $end
$var wire 1 {& equal $end
$var wire 1 |& g $end
$var wire 1 }& input1 $end
$var wire 1 ~& input2 $end
$var wire 1 !' less $end
$var wire 2 "' operation [1:0] $end
$var wire 1 #' p $end
$var wire 1 $' src1 $end
$var wire 1 %' src2 $end
$var reg 1 &' result $end
$upscope $end
$scope module cl $end
$var wire 8 '' G [7:0] $end
$var wire 1 t% G_out $end
$var wire 8 (' P [7:0] $end
$var wire 1 s% P_out $end
$var wire 1 h% cin $end
$var wire 1 )' g_wire $end
$var wire 1 *' p_wire $end
$var wire 8 +' cout [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder1 $end
$var wire 32 ,' src2_i [31:0] $end
$var wire 32 -' sum_o [31:0] $end
$var wire 32 .' src1_i [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 /' src1_i [31:0] $end
$var wire 32 0' sum_o [31:0] $end
$var wire 32 1' src2_i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 6 2' instr_op_i [5:0] $end
$var wire 5 3' shamp_i [4:0] $end
$var reg 1 = ALUSrc_o $end
$var reg 3 4' ALU_op_o [2:0] $end
$var reg 1 ; Branch_o $end
$var reg 1 7 RegDst_o $end
$var reg 1 6 RegWrite_o $end
$var reg 1 - lui_ctrl $end
$var reg 5 5' shamp_o [4:0] $end
$var reg 1 ) sltiu_ctrl $end
$var reg 1 & zero_extend $end
$upscope $end
$scope module IM $end
$var wire 32 6' pc_addr_i [31:0] $end
$var reg 32 7' instr_o [31:0] $end
$var integer 32 8' i [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 1 = select_i $end
$var wire 32 9' data1_i [31:0] $end
$var wire 32 :' data0_i [31:0] $end
$var reg 32 ;' data_o [31:0] $end
$upscope $end
$scope module Mux_Branch $end
$var wire 1 ! data0_i $end
$var wire 1 " data1_i $end
$var wire 1 <' select_i $end
$var reg 1 : data_o $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 =' data0_i [31:0] $end
$var wire 32 >' data1_i [31:0] $end
$var wire 1 : select_i $end
$var reg 32 ?' data_o [31:0] $end
$upscope $end
$scope module Mux_Signed_or_Unsigned $end
$var wire 1 & select_i $end
$var wire 32 @' data1_i [31:0] $end
$var wire 32 A' data0_i [31:0] $end
$var reg 32 B' data_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 C' data0_i [4:0] $end
$var wire 5 D' data1_i [4:0] $end
$var wire 1 7 select_i $end
$var reg 5 E' data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 # clk_i $end
$var wire 32 F' pc_in_i [31:0] $end
$var wire 1 $ rst_i $end
$var reg 32 G' pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 H' RDaddr_i [4:0] $end
$var wire 32 I' RDdata_i [31:0] $end
$var wire 5 J' RSaddr_i [4:0] $end
$var wire 32 K' RSdata_o [31:0] $end
$var wire 5 L' RTaddr_i [4:0] $end
$var wire 32 M' RTdata_o [31:0] $end
$var wire 1 6 RegWrite_i $end
$var wire 1 # clk_i $end
$var wire 1 $ rst_i $end
$upscope $end
$scope module SE $end
$var wire 16 N' data_i [15:0] $end
$var reg 32 O' data_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 P' data_i [31:0] $end
$var wire 32 Q' data_o [31:0] $end
$upscope $end
$scope module ZFE $end
$var wire 16 R' data_i [15:0] $end
$var reg 32 S' data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx S'
bx R'
bx00 Q'
bx P'
bx O'
bx N'
bx M'
bx L'
bx K'
bx J'
bx I'
bx H'
bx G'
bx F'
bx E'
bx D'
bx C'
bx B'
bx A'
bx @'
bx ?'
bx >'
bx ='
x<'
bx ;'
bx :'
bx 9'
b100000 8'
bx 7'
bx 6'
bx 5'
bx 4'
bx 3'
bx 2'
bx00 1'
bx 0'
bx /'
bx .'
bx -'
b100 ,'
bx +'
x*'
x)'
bx ('
bx ''
x&'
x%'
x$'
x#'
bx "'
0!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
bx r&
0q&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
bx d&
0c&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
bx V&
0U&
xT&
xS&
xR&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
bx H&
0G&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
bx :&
09&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
bx ,&
0+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
bx |%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
bx r%
bx q%
bx p%
bx o%
bx n%
bx m%
bx l%
bx k%
0j%
bx i%
xh%
bx g%
xf%
xe%
bx d%
bx c%
xb%
xa%
x`%
x_%
bx ^%
0]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
bx P%
0O%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
bx B%
0A%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
bx 4%
03%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
bx &%
0%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
bx v$
0u$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
bx h$
0g$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
bx Z$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
bx P$
bx O$
bx N$
bx M$
bx L$
bx K$
bx J$
bx I$
0H$
bx G$
xF$
bx E$
xD$
xC$
bx B$
bx A$
x@$
x?$
x>$
x=$
bx <$
0;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
bx .$
0-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
bx ~#
0}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
bx p#
0o#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
bx b#
0a#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
bx T#
0S#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
bx F#
0E#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
bx 8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
bx .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
bx '#
0&#
bx %#
x$#
bx ##
x"#
x!#
bx ~"
bx }"
x|"
x{"
xz"
xy"
bx x"
0w"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
bx j"
0i"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
bx \"
0["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
bx N"
0M"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
bx @"
0?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
bx 2"
01"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
bx $"
0#"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
bx t
xs
xr
xq
xp
xo
xn
xm
xl
xk
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
xU
xT
xS
bx R
xQ
bx P
xO
xN
xM
bx L
xK
bx J
xI
bx H
bx G
bx F
bx E
xD
bx C
xB
bx A
bx @
bx ?
bx >
x=
bx <
x;
x:
bx 9
bx 8
x7
x6
bx 5
bx 4
bx 3
bx 2
bx00 1
bx 0
bx /
bx .
x-
bx ,
bx +
bx *
x)
bx (
bx '
x&
x%
0$
0#
x"
x!
$end
#5000
b11111111111111111111111111111111 +
b11111111111111111111111111111111 R
b11111111111111111111111111111111 I'
0%
1l$
1z$
1*%
18%
1F%
1T%
1b%
10&
1>&
1L&
1Z&
1h&
1v&
1&'
1D
1N
1_$
1m$
1{$
1+%
19%
1G%
1U%
1#&
11&
1?&
1M&
1[&
1i&
1w&
1K
0M
0b$
0p$
0~$
0.%
0<%
0J%
0X%
0&&
04&
0B&
0P&
0^&
0l&
0z&
1J#
1X#
1f#
1t#
1$$
12$
1@$
b11111111 L$
1^$
b0 G$
b0 P$
b0 g%
b11111111 n%
1"&
b0 W
b0 i%
b0 r%
b0 +'
1=#
1K#
1Y#
1g#
1u#
1%$
13$
1S$
1u%
0@#
0N#
0\#
0j#
0x#
0($
06$
0F$
0Q
0h%
b11111111 *#
1<#
b0 %#
b0 .#
b0 E$
16"
1D"
1R"
1`"
1n"
1|"
11#
1("
1)"
17"
1E"
1S"
1a"
1o"
0$#
1y
0,"
0:"
0H"
0V"
0d"
0r"
b0 ^
b0 a
0|
0l
0!#
b0 b
b0 j
b0 ##
1s%
1*'
1Q$
1f%
1/#
1D$
b11111111111111111111111111111111 L
b11111111111111111111111111111111 Z
b11111111 f
1x
b1110 [
b1110 `
0k
0"#
1I
1m
0t%
0)'
0R$
0e%
b0 \
b0 _
00#
0C$
1x%
1}%
1w%
1'&
1-&
1%&
15&
1;&
13&
1C&
1I&
1A&
1Q&
1W&
1O&
1_&
1e&
1]&
1m&
1s&
1k&
b11111111 q%
1{&
b11111111 o%
b11111111 ('
1#'
1y&
1V$
1[$
1U$
1c$
1i$
1a$
1q$
1w$
1o$
1!%
1'%
1}$
1/%
15%
1-%
1=%
1C%
1;%
1K%
1Q%
1I%
b11111111 O$
1Y%
b11111111 M$
b11111111 d%
1_%
1W%
14#
19#
13#
1A#
1G#
1?#
1O#
1U#
1M#
1]#
1c#
1[#
1k#
1q#
1i#
1y#
1!$
1w#
1)$
1/$
1'$
b11111111 -#
17$
b11111111 +#
b11111111 B$
1=$
15$
0O
0p
0u
0o
1}
0~
0z
1-"
13"
1+"
1;"
1A"
19"
1I"
1O"
1G"
1W"
1]"
1U"
1e"
1k"
1c"
b11111111111111111111111111111110 P
b11111111111111111111111111111110 ]
b11111110 i
1s"
1y"
1q"
1{%
1*&
18&
1F&
1T&
1b&
1p&
1~&
1Y$
1f$
1t$
1$%
12%
1@%
1N%
1\%
17#
1D#
1R#
1`#
1n#
1|#
1,$
1:$
0s
0""
10"
1>"
1L"
1Z"
1h"
1v"
0!&
0/&
0=&
0K&
0Y&
0g&
0u&
0%'
0]$
0k$
0y$
0)%
07%
0E%
0S%
0a%
0;#
0I#
0W#
0e#
0s#
0#$
01$
0?$
1w
1'"
05"
0C"
0Q"
0_"
0m"
0{"
0y%
0v%
0(&
0$&
06&
02&
0D&
0@&
0R&
0N&
0`&
0\&
0n&
0j&
b0 p%
b0 ''
0|&
0x&
0W$
0T$
0d$
0`$
0r$
0n$
0"%
0|$
00%
0,%
0>%
0:%
0L%
0H%
b0 N$
b0 c%
0Z%
0V%
05#
02#
0B#
0>#
0P#
0L#
0^#
0Z#
0l#
0h#
0z#
0v#
0*$
0&$
b0 ,#
b0 A$
08$
04$
0q
0n
b11111110 g
b11111110 ~"
1%"
1{
0."
0*"
0<"
08"
0J"
0F"
0X"
0T"
0f"
0b"
b0 h
b0 }"
0t"
0p"
b100 2
b100 ?'
b100 F'
1B
b0 m%
b0 K$
b0 )#
b11 e
0:
0z%
0)&
07&
0E&
0S&
0a&
0o&
0}&
0X$
0e$
0s$
0#%
01%
0?%
0M%
0[%
06#
0C#
0Q#
0_#
0m#
0{#
0+$
09$
0r
1!"
0/"
0="
0K"
0Y"
0g"
0u"
b10010000 '
b10010000 0'
b10010000 >'
b10001100 1
b10001100 1'
b10001100 Q'
0S
1T
1U
b10 V
b10 c
b10 t
b10 $"
b10 2"
b10 @"
b10 N"
b10 \"
b10 j"
b10 x"
b10 '#
b10 8#
b10 F#
b10 T#
b10 b#
b10 p#
b10 ~#
b10 .$
b10 <$
b10 I$
b10 Z$
b10 h$
b10 v$
b10 &%
b10 4%
b10 B%
b10 P%
b10 ^%
b10 k%
b10 |%
b10 ,&
b10 :&
b10 H&
b10 V&
b10 d&
b10 r&
b10 "'
b100011 5
b100011 9'
b100011 B'
b11 F
b11 4
b11 G
b11 X
b11 ;'
0"
0!
b0 3
b0 E'
b0 H'
0~%
0.&
0<&
0J&
0X&
0f&
0t&
0$'
0\$
0j$
0x$
0(%
06%
0D%
0R%
0`%
0:#
0H#
0V#
0d#
0r#
0"$
00$
0>$
0v
1&"
04"
0B"
0P"
0^"
0l"
0z"
b100011 /
b100011 @'
b100011 S'
b100011 0
b100011 A'
b100011 O'
b100011 P'
b110 >
b110 A
b110 C
b0 *
b0 J
b0 5'
b0 <
b0 @
b0 4'
0)
0-
0&
16
0=
0;
17
b0 l%
b0 J$
b0 (#
b10 d
0<'
b100011 R'
b100011 N'
b100011 ?
b0 3'
b0 2'
b11 8
b11 :'
b11 M'
b11 L'
b10 E
b10 9
b10 H
b10 Y
b10 K'
b10 J'
b0 D'
b11 C'
b10000110000000000100011 .
b10000110000000000100011 7'
b100 (
b100 -'
b100 /'
b100 ='
b0 ,
b0 .'
b0 6'
b0 G'
1#
#10000
0#
1$
#15000
b100 +
b100 R
b100 I'
0l$
0z$
0*%
08%
0F%
0T%
0b%
00&
0>&
0L&
0Z&
0h&
0v&
0&'
0D
0N
0_$
0m$
0{$
0+%
09%
0G%
0U%
0#&
01&
0?&
0M&
0[&
0i&
0w&
0K
0J#
0X#
0f#
0t#
0$$
02$
0@$
1b$
1p$
1~$
1.%
1<%
1J%
1X%
1&&
14&
1B&
1P&
1^&
1l&
1z&
0=#
0K#
0Y#
0g#
0u#
0%$
03$
b0 L$
0^$
b11111111 G$
b11111111 P$
b11111111 g%
b0 n%
0"&
b11111111 W
b11111111 i%
b11111111 r%
b11111111 +'
1@#
1N#
1\#
1j#
1x#
1($
16$
0S$
0u%
0M
b0 *#
0<#
b11111111 %#
b11111111 .#
b11111111 E$
1F$
1h%
1Q
0`"
0n"
0|"
01#
0S"
0a"
0o"
1$#
0R"
1V"
1d"
1r"
b1111 ^
b1111 a
0E"
1,"
1H"
b1 \
b1 _
1l
1!#
1|
16"
b11111011 b
b11111011 j
b11111011 ##
1)"
0x
0("
b100 L
b100 Z
b100 f
0D"
0-"
03"
0+"
0m
0y
07"
1""
00"
1p
1u
1o
1}
b11111011 g
b11111011 ~"
1%"
1{
b11111111111111111111111111110011 P
b11111111111111111111111111110011 ]
b11110011 i
0;"
b1000 h
b1000 }"
1<"
18"
0'"
15"
1r
0!"
1="
b10000010001100 1
b10000010001100 1'
b10000010001100 Q'
b100000100011 5
b100000100011 9'
b100000100011 B'
b101 e
1v
0&"
1B"
b100000100011 /
b100000100011 @'
b100000100011 S'
b100000100011 0
b100000100011 A'
b100000100011 O'
b100000100011 P'
b101 F
b101 4
b101 G
b101 X
b101 ;'
b1001 d
b1 3
b1 E'
b1 H'
b100000100011 R'
b100000100011 N'
b101 8
b101 :'
b101 M'
b101 L'
b1001 E
b1001 9
b1001 H
b1001 Y
b1001 K'
b1001 J'
b1 D'
b101 C'
b1000 2
b1000 ?'
b1000 F'
b1001001010000100000100011 .
b1001001010000100000100011 7'
b10000010010100 '
b10000010010100 0'
b10000010010100 >'
b1000 (
b1000 -'
b1000 /'
b1000 ='
b100 ,
b100 .'
b100 6'
b100 G'
1#
#20000
0#
#25000
b101 +
b101 R
b101 I'
0h%
0Q
0$#
0F$
0V"
0d"
0r"
0M
b0 ^
b0 a
0B&
0P&
0^&
0l&
0z&
04&
0~$
0.%
0<%
0J%
0X%
0p$
0\#
0j#
0x#
0($
06$
0N#
0H"
b0 \
b0 _
0l
0!#
0&&
0b$
0@#
0,"
b0 W
b0 i%
b0 r%
b0 +'
b0 G$
b0 P$
b0 g%
b0 %#
b0 .#
b0 E$
0|
0"&
0s%
0*'
00&
0>&
0L&
0Z&
0h&
0v&
b0 n%
0&'
0K
0^$
0Q$
0f%
0l$
0z$
0*%
08%
0F%
0T%
b0 L$
0b%
0<#
b0 [
b0 `
0/#
0D$
0J#
0X#
0f#
0t#
0$$
02$
b0 *#
0@$
0("
0R"
0`"
0n"
0|"
b0 b
b0 j
b0 ##
0u%
0#&
01&
0?&
0M&
0[&
0i&
0w&
0I
0S$
0_$
0m$
0{$
0+%
09%
0G%
0U%
01#
0=#
0K#
0Y#
0g#
0u#
0%$
03$
0y
0E"
0S"
0a"
0o"
1x
16"
b101 L
b101 Z
b101 f
0D"
0x%
0}%
0w%
0'&
0-&
0%&
05&
0;&
03&
0C&
0I&
0A&
0Q&
0W&
0O&
0_&
0e&
0]&
0m&
0s&
0k&
b0 q%
0{&
b0 o%
b0 ('
0#'
0y&
0V$
0[$
0U$
0c$
0i$
0a$
0q$
0w$
0o$
0!%
0'%
0}$
0/%
05%
0-%
0=%
0C%
0;%
0K%
0Q%
0I%
b0 O$
0Y%
b0 M$
b0 d%
0_%
0W%
04#
09#
03#
0A#
0G#
0?#
0O#
0U#
0M#
0]#
0c#
0[#
0k#
0q#
0i#
0y#
0!$
0w#
0)$
0/$
0'$
b0 -#
07$
b0 +#
b0 B$
0=$
05$
0}
0%"
0{
0A"
09"
0I"
0O"
0G"
0W"
0]"
0U"
0e"
0k"
0c"
0s"
0y"
0q"
1m
1)"
07"
0{%
0*&
08&
0F&
0T&
0b&
0p&
0~&
0Y$
0f$
0t$
0$%
02%
0@%
0N%
0\%
07#
0D#
0R#
0`#
0n#
0|#
0,$
0:$
0""
0>"
0L"
0Z"
0h"
0v"
0p
0u
0o
0O
1-"
b100 g
b100 ~"
13"
1+"
b100 P
b100 ]
b100 i
0;"
b0 h
b0 }"
0<"
08"
1!&
1/&
1=&
1K&
1Y&
1g&
1u&
1%'
1]$
1k$
1y$
1)%
17%
1E%
1S%
1a%
1;#
1I#
1W#
1e#
1s#
1#$
11$
1?$
1'"
1C"
1Q"
1_"
1m"
1{"
0r
1/"
0="
b10110000010001100 1
b10110000010001100 1'
b10110000010001100 Q'
b101100000100011 5
b101100000100011 9'
b101100000100011 B'
b11111111 m%
b11111111 K$
b11111111 )#
b11111111 e
0v
14"
0B"
b101100000100011 /
b101100000100011 @'
b101100000100011 S'
b101100000100011 0
b101100000100011 A'
b101100000100011 O'
b101100000100011 P'
b11111111111111111111111111111111 F
b11111111111111111111111111111111 4
b11111111111111111111111111111111 G
b11111111111111111111111111111111 X
b11111111111111111111111111111111 ;'
b100 d
b1011 3
b1011 E'
b1011 H'
b101100000100011 R'
b101100000100011 N'
b11111111111111111111111111111111 8
b11111111111111111111111111111111 :'
b11111111111111111111111111111111 M'
b0 L'
b100 E
b100 9
b100 H
b100 Y
b100 K'
b1 J'
b1011 D'
b0 C'
b1100 2
b1100 ?'
b1100 F'
b1000000101100000100011 .
b1000000101100000100011 7'
b10110000010011000 '
b10110000010011000 0'
b10110000010011000 >'
b1100 (
b1100 -'
b1100 /'
b1100 ='
b1000 ,
b1000 .'
b1000 6'
b1000 G'
1#
#30000
0#
#35000
1%
b0 +
b0 R
b0 I'
1b$
1p$
1~$
1.%
1<%
1J%
1X%
1&&
14&
1B&
1P&
1^&
1l&
1z&
1@#
1N#
1\#
1j#
1x#
1($
16$
b11111111 G$
b11111111 P$
b11111111 g%
b11111111 W
b11111111 i%
b11111111 r%
b11111111 +'
b11111111 %#
b11111111 .#
b11111111 E$
0M
1F$
1h%
1Q
1$#
1d"
1r"
b1111 ^
b1111 a
1V"
06"
0)"
1:"
1H"
1,"
1k
1"#
1|
b11111111 b
b11111111 j
b11111111 ##
0"&
1s%
1*'
00&
0>&
0L&
0Z&
0h&
0v&
b0 n%
0&'
0K
0^$
1Q$
1f%
0l$
0z$
0*%
08%
0F%
0T%
b0 L$
0b%
0<#
b1111 [
b1111 `
1/#
1D$
0J#
0X#
0f#
0t#
0$$
02$
b0 *#
0@$
0x
0("
0D"
0R"
0`"
0n"
b0 L
b0 Z
b0 f
0|"
0u%
0#&
01&
0?&
0M&
0[&
0i&
0w&
1I
0S$
0_$
0m$
0{$
0+%
09%
0G%
0U%
01#
0=#
0K#
0Y#
0g#
0u#
0%$
03$
0m
0y
07"
0E"
0S"
0a"
0o"
1O
1x%
1}%
1w%
1'&
1-&
1%&
15&
1;&
13&
1C&
1I&
1A&
1Q&
1W&
1O&
1_&
1e&
1]&
1m&
1s&
1k&
b11111111 q%
1{&
b11111111 o%
b11111111 ('
1#'
1y&
1V$
1[$
1U$
1c$
1i$
1a$
1q$
1w$
1o$
1!%
1'%
1}$
1/%
15%
1-%
1=%
1C%
1;%
1K%
1Q%
1I%
b11111111 O$
1Y%
b11111111 M$
b11111111 d%
1_%
1W%
14#
19#
13#
1A#
1G#
1?#
1O#
1U#
1M#
1]#
1c#
1[#
1k#
1q#
1i#
1y#
1!$
1w#
1)$
1/$
1'$
b11111111 -#
17$
b11111111 +#
b11111111 B$
1=$
15$
1p
1u
1o
1}
1%"
1{
1;"
1A"
19"
1I"
1O"
1G"
1W"
1]"
1U"
1e"
1k"
1c"
b11111111111111111111111111111111 P
b11111111111111111111111111111111 ]
b11111111 i
1s"
b11111111 g
b11111111 ~"
1y"
1q"
1z%
1)&
17&
1E&
1S&
1a&
1o&
1}&
1X$
1e$
1s$
1#%
11%
1?%
1M%
1[%
16#
1C#
1Q#
1_#
1m#
1{#
1+$
19$
1r
1!"
1="
1K"
1Y"
1g"
1u"
b0 1
b0 1'
b0 Q'
b0 5
b0 9'
b0 B'
1~%
1.&
1<&
1J&
1X&
1f&
1t&
1$'
1\$
1j$
1x$
1(%
16%
1D%
1R%
1`%
1:#
1H#
1V#
1d#
1r#
1"$
10$
1>$
1v
1&"
1B"
1P"
1^"
1l"
1z"
0D
0N
b0 /
b0 @'
b0 S'
b0 0
b0 A'
b0 O'
b0 P'
b11111111 l%
b11111111 J$
b11111111 (#
b11111111 d
b0 3
b0 E'
b0 H'
b0 R'
b0 N'
b0 ?
b11111111111111111111111111111111 E
b11111111111111111111111111111111 9
b11111111111111111111111111111111 H
b11111111111111111111111111111111 Y
b11111111111111111111111111111111 K'
b0 J'
b0 D'
b10000 2
b10000 ?'
b10000 F'
b0 .
b0 7'
b10000 '
b10000 0'
b10000 >'
b10000 (
b10000 -'
b10000 /'
b10000 ='
b1100 ,
b1100 .'
b1100 6'
b1100 G'
1#
#40000
0#
#45000
1{%
1*&
18&
1F&
1T&
1b&
1p&
1~&
1Y$
1f$
1t$
1$%
12%
1@%
1N%
1\%
17#
1D#
1R#
1`#
1n#
1|#
1,$
1:$
1s
1""
10"
1>"
1L"
1Z"
1h"
1v"
0z%
0)&
07&
0E&
0S&
0a&
0o&
0}&
0X$
0e$
0s$
0#%
01%
0?%
0M%
0[%
06#
0C#
0Q#
0_#
0m#
0{#
0+$
09$
0r
0!"
0/"
0="
0K"
0Y"
0g"
0u"
0!&
0/&
0=&
0K&
0Y&
0g&
0u&
0%'
0]$
0k$
0y$
0)%
07%
0E%
0S%
0a%
0;#
0I#
0W#
0e#
0s#
0#$
01$
0?$
0w
0'"
05"
0C"
0Q"
0_"
0m"
0{"
0~%
0.&
0<&
0J&
0X&
0f&
0t&
0$'
0\$
0j$
0x$
0(%
06%
0D%
0R%
0`%
0:#
0H#
0V#
0d#
0r#
0"$
00$
0>$
0v
0&"
04"
0B"
0P"
0^"
0l"
0z"
b0 m%
b0 K$
b0 )#
b0 e
b10100 2
b10100 ?'
b10100 F'
b0 l%
b0 J$
b0 (#
b0 d
b0 F
b0 4
b0 G
b0 X
b0 ;'
b10100 '
b10100 0'
b10100 >'
b10100 (
b10100 -'
b10100 /'
b10100 ='
b10000 ,
b10000 .'
b10000 6'
b10000 G'
b0 E
b0 9
b0 H
b0 Y
b0 K'
b0 8
b0 :'
b0 M'
1#
